(ns 
  ^{:author "Peter Feldtmann"
    :doc "Utility functions used by datomic tools."}
  clj.datomic.tools.util)


;; miscellania from "day of datomic"

(defn tuplify
  "Returns a vector of the vals at keys ks in map."
  [m ks]
  (mapv #(get m %) ks))

(defn maps->rel
  "Convert a collection of maps into a relation, returning
   the tuplification of each map by ks"
  [maps ks]
  (mapv #(tuplify % ks) maps))

;; from datomic-simple

(defn map-keys
  "Given a map and fn that takes a key, creates a new map with keys generated by the fn."
  [oldmap kfn]
  (->> oldmap
    (map (fn [[key val]] [(kfn key) val])) (into {})))

(defn add-ns-to-keys
  "Given a namespace and map, namespaces the keys of the map."
  [nsp attr-map]
  (map-keys attr-map #(keyword (name nsp) (name %))))

(defn strip-ns-from-keys
  "Creates a map with original keyword keys stripped off their namespace i.e. :url/name -> :name."
  [attr-map]
  (map-keys attr-map #(keyword (name %))))


;; helpers for queries

(defn solo?
  "returns true if there is a single item in the collection." 
  [coll]
  (and (coll? coll)
       (first coll)
       (empty? (rest coll))))

(defn solo 
  "Returns the single item in a collection, nil if collection empty, 
   or throws if collection has more than one item."
  [coll]
  (when (coll? coll) 
    (if (next coll)
      (throw (ex-info "Expected one item, got more than one" 
                      {:coll coll :count (count coll)}))
      (first coll)
      )))

(defn get-only
  "Return the one and only item from a query result"
  [query-result]
  (solo (solo (lazy-seq query-result))))

(defn save-val
  [m]
  (when (map? m) 
    (val m)))

